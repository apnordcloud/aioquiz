1:
    title: 1.3.1a
    task: |
        Napisz program, który po wejściu na adres: /add/<liczba1>/<liczba2> odpowie sumą podanych liczb. Przykład: wejście na /add/3/5 powinno zwrócić "8".
    possible_answer: yey
2:
    title: 1.3.1b
    task: |
        (Do domu) Powyższy program zabezpiecz przed sytuacją, w której użytkownik poda ciąg znaków zamiast liczby.
    possible_answer: yey
3:
    title: 1.3.2
    task: |
        Napisz program, który po wejściu na adres /current-status metodą POST ustawi aktualny status na podstawie przekazanego w zapytaniu JSON-a
        (np. {"status": "starting"}), a po wejściu na ten sam adres metodą GET zwróci aktualny status.
    possible_answer: yey
4:
    title: 1.3.3a
    task: |
        Napisz program, który: po wejściu na adres /user/<username>/set-password ustawi hasło użytkownika username (na podstawie podanego JSON-a).
    possible_answer: yey
5:
    title: 1.3.3b
    task: |
        ...po wejściu na /user/<username>/login odpowie komunikatem "Login successful" jeśli podane w JSON-ie hasło zgadza się z
        wcześniej ustawionym lub – jeśli hasło się nie zgadza albo w ogóle nie zostało ustawione – komunikatem "Wrong password".
    possible_answer: yey
6:
    title: 1.3.3c
    task: |
        (Do domu) ...po wejściu na /user/<username>/login aplikacja powinna zwracać token w formacie UUID4.
    possible_answer: yey
7:
    title: 1.3.4a
    task: |
        Napisz program, który po wejściu na adres /planet-details?planet=Tatooine odpowie jsonem zawierającym dane planety,
        o którą zapytał użytkownik (np. klimat, liczba mieszkańców). Dane planety program powinien pobierać ze Star Wars API,
        np.: https://swapi.co/api/planets/?search=Tatooine
    possible_answer: yey
8:
    title: 1.3.4b
    task: |
        ...jeśli użytkownik poda nieistniejącą planetę, powinien otrzymać komunikat "Planet <nazwa_planety> does not exist".
    possible_answer: yey
9:
    title: 1.3.5a
    task: |
        Napisz program, który pod adresem /users/add będzie przyjmował zapytania POST z JSON-em o następującej strukturze:
        {"imie": "Grzegorz", "wiek": "26", "plec": "m"}
        W wyniku takiego zapytania dane osoby należy zapisać na serwerze.
    possible_answer: yey
10:
    title: 1.3.5b
    task: |
        Po wejściu na adres: /users/stats zapytaniem GET program zwróci następującego JSON-a:
        {"ilosc_osob": X, "sredni_wiek": X, "najpopularniejsze_imie": X, "plec": {"k": X, "m": X}}
        (Rzecz jasna w miejscu X-ów powinny pojawić się dane oparte o dotychczas dodanych użytkowników.
        W kluczu ["plec"]["k"] powinna znaleźć się liczba zapisanych kobiet.)
    possible_answer: yey
11:
    title: 1.3.6
    task: |
        Napisz program, który po wejściu na adres /hello odpowie dowolnym komunikatem powitalnym (np. "Hello world!"), a po wejściu na adres /witam zwróci przekierowanie na adres /hello.
        Działanie programu sprawdź w przeglądarce.
    possible_answer: yey
