1:
    title: 1.1.1
    task: |
        Wyobraźmy sobie klasę "Człowiek" z metodą "mowa" i podklasę "Człowieka" - "Polityk" z metodami "przyjmij łapówkę" i "kłam".
        Domyślnie "Człowiek" po wykonaniu metody "mów" (speak) wypisze "Mowie prawdę", natomiast każda instancja "Polityka" powie "Kłamie, bo mogę", chyba że wcześniej została wykonana metoda "przyjmij łapówkę" (recive_bribe), wtedy powie prawdę.
    possible_answer: yey
2:
    title: 1.1.2
    task: |
        Stwórz konstruktor (__init__) dla klasy "Człowiek", który oprócz imienia pobierze też wzrost i wagę.
    possible_answer: yey
3:
    title: 1.1.3
    task: |
        Napisz funkcję, która policzy BMI "Człowieka" (count_bmi). Pamietaj że wartośc powinny już być w klasie (zad 1.1.2)
    possible_answer: yey
4:
    title: 1.1.4
    task: |
        Napisz funkcję, która policzy, ile kilogramów brakuje do normy (diff_to_norm).
    possible_answer: yey
5:
    title: 1.1.5
    task: |
        Zaimplementuj zapisywanie JSON z danymi danego "Człowieka" na dysk pod plikiem <imie>.json (save_data).
    possible_answer: yey
6:
    title: 1.1.6
    task: |
        Zakładając, że aby schudnąć 1 kg trzeba spalić 6000kcal, napisz funkcjonalność, która powie użytkownikowi, ile powinien godzin biegać(500kcal/h) / jeździć rowerem(600kcal/h) / uprawiać hobby(250kcal/h) / grać w szachy(150kcal/h) / etc. aby być w normie (to_burn).
    possible_answer: yey
7:
    title: 1.1.7
    task: |
        Zakładając, że aby przytyć 1 kg trzeba dostarczyć 6000kcal, napisz funkcjonalność, która powie użytkownikowi, ile powinien zjeść czekolady(450kcal/100g) / ziemniaków(80kcal/100g) więcej aby być w normie (to_eat)
    possible_answer: yey
8:
    title: 1.1.8
    task: |
        Napisz funkcję, która doradzi, czy trzeba przytyć czy schudnąć (i ile), wykorzystując poprzednie funkcje (what_to_do).
    possible_answer: yey















